@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _js
@inject IFileUpload _fileUpload

<_DeleteConfirmation IsParentComponentProcessing="isLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a class="btn btn-primary form-control" href="/product/create">Add new Product</a>
    </div>
    <div class="col-12">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorites</th>
                        <th>Costumer Favorites</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Products)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <th>
                                <input type="checkbox" disabled checked="@item.ShopFavorites">  
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@item.CustomerFavorites">
                            </th>
                            <th>
                                @item.Category.Name
                            </th>
                            <td>
                                <NavLink href="@($"product/edit/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (isLoading)
            {
                <div class="text-center">
                    <img src="/image/Loadinggif.gif">
                </div>
            }
        }

    </div>
</div>

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool isLoading { get; set; } 
    public int DeleteProductID { get; set; } = 0;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadProducts();    
        }        
    }
    private async Task loadProducts()
    {
        isLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        isLoading = false;
        StateHasChanged();
    }
    //Esse metodo mostra o box de confirmacao se quer deletar ou nao!
    private void HandleDelete(int id)
    {
        DeleteProductID = id;
        _js.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isLoading = true;
        if (isConfirmed && DeleteProductID!=0)
        {
            //Delete
            ProductDTO product = await _productRepository.Get(DeleteProductID);

            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            await _productRepository.Delete(DeleteProductID);
            await _js.ToastrSuccess("Product Deleted successfully");
            await loadProducts();
            await _js.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        isLoading = false;
    }
}
